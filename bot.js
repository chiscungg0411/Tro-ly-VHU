require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const express = require("express");
const puppeteerExtra = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");

puppeteerExtra.use(StealthPlugin());

// H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o ƒë·ªô tr·ªÖ
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const app = express();
app.use(express.json());
const bot = new TelegramBot(TOKEN);

// X·ª≠ l√Ω SIGTERM gracefully
process.on("SIGTERM", async () => {
  console.log("üì¥ Nh·∫≠n t√≠n hi·ªáu SIGTERM, ƒëang d·ª´ng bot...");
  try {
    await bot.deleteWebHook(); // X√≥a webhook khi d·ª´ng
    console.log("‚úÖ ƒê√£ x√≥a webhook.");
    console.log("‚úÖ Bot ƒë√£ d·ª´ng an to√†n.");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå L·ªói khi d·ª´ng bot:", error.message);
    process.exit(1);
  }
});

// X·ª≠ l√Ω l·ªói h·ªá th·ªëng
process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå Unhandled Rejection at:", promise, "reason:", reason);
});
process.on("uncaughtException", (error) => {
  console.error("‚ùå Uncaught Exception:", error.message);
});

// H√†m kh·ªüi t·∫°o tr√¨nh duy·ªát Puppeteer
async function launchBrowser() {
  try {
    const browser = await puppeteerExtra.launch({
      executablePath: process.env.CHROME_PATH || "/usr/bin/google-chrome-stable",
      headless: "new",
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--disable-extensions",
        "--disable-background-networking",
        "--disable-accelerated-2d-canvas",
        "--disable-features=site-per-process",
        "--disable-background-timer-throttling",
        "--disable-renderer-backgrounding",
      ],
      defaultViewport: { width: 1280, height: 720 },
      timeout: 60000,
      pipe: true,
    });
    console.log("‚úÖ Tr√¨nh duy·ªát Puppeteer ƒë√£ kh·ªüi ƒë·ªông.");
    return browser;
  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi ƒë·ªông tr√¨nh duy·ªát:", error.message);
    throw new Error("Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông tr√¨nh duy·ªát.");
  }
}

// H√†m ƒëƒÉng nh·∫≠p v√†o portal
async function login(page, username, password, retries = 5) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîë Th·ª≠ ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}...`);
      await page.goto("https://portal.vhu.edu.vn/login", {
        waitUntil: "networkidle0",
        timeout: 60000,
      });
      console.log("‚úÖ Trang ƒëƒÉng nh·∫≠p ƒë√£ t·∫£i.");

      const hasCaptcha = await page.evaluate(() => !!document.querySelector("iframe[src*='captcha']"));
      if (hasCaptcha) {
        throw new Error("Trang y√™u c·∫ßu CAPTCHA, kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông.");
      }

      await page.waitForSelector("input[name='email']", { timeout: 60000 });
      await page.type("input[name='email']", username, { delay: 100 });
      await page.waitForSelector("input[name='password']", { timeout: 60000 });
      await page.type("input[name='password']", password, { delay: 100 });
      console.log("‚úçÔ∏è ƒê√£ nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p.");

      await page.setUserAgent(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
      );

      await page.waitForSelector("button[type='submit']", { timeout: 60000 });
      await page.click("button[type='submit']");
      console.log("‚è≥ ƒêang ch·ªù ph·∫£n h·ªìi sau ƒëƒÉng nh·∫≠p...");

      await page.waitForNavigation({ waitUntil: "networkidle0", timeout: 60000 });
      const finalUrl = page.url();
      console.log(`üåê URL sau ƒëƒÉng nh·∫≠p: ${finalUrl}`);

      if (finalUrl.includes("/login")) {
        const errorMessage = await page.evaluate(() => {
          if (document.body.innerText.includes("Username or password is incorrect")) return "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.";
          return "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i (l·ªói kh√¥ng x√°c ƒë·ªãnh).";
        });
        throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ${errorMessage}`);
      }

      console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:", finalUrl);
      return true;
    } catch (error) {
      console.error(`‚ùå L·ªói ƒëƒÉng nh·∫≠p l·∫ßn ${attempt}:`, error.message);
      if (attempt === retries) throw new Error(`ƒêƒÉng nh·∫≠p th·∫•t b·∫°i sau ${retries} l·∫ßn: ${error.message}`);
      console.log("‚è≥ Th·ª≠ l·∫°i sau 5 gi√¢y...");
      await page.close();
      await delay(5000);
      page = await (await launchBrowser()).newPage();
    }
  }
}

// H√†m l·∫•y th√¥ng tin sinh vi√™n
async function getStudentInfo() {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang th√¥ng tin sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student/info", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });

    console.log("‚è≥ ƒêang ch·ªù t·∫£i b·∫£ng th√¥ng tin...");
    await page.waitForSelector(".MuiTable-root", { timeout: 60000 });

    const data = await page.evaluate(() => {
      const tables = document.querySelectorAll(".MuiTable-root");
      const studentInfo = {};
      const contactInfo = {};
      const courseInfo = {};
      const relativeInfo = {};

      if (tables.length >= 4) {
        // 1. Th√¥ng tin sinh vi√™n
        const studentRows = tables[0].querySelectorAll("tbody tr");
        studentRows.forEach((row) => {
          const cells = row.querySelectorAll("td");
          if (cells.length === 2) {
            const key = cells[0].innerText.trim();
            const value = cells[1].innerText.trim();
            if (value) studentInfo[key] = value;
          }
        });

        // 2. Th√¥ng tin li√™n l·∫°c
        const contactRows = tables[1].querySelectorAll("tbody tr");
        contactRows.forEach((row) => {
          const cells = row.querySelectorAll("td");
          if (cells.length === 2) {
            const key = cells[0].innerText.trim();
            const value = cells[1].innerText.trim();
            if (value) contactInfo[key] = value;
          }
        });

        // 3. Th√¥ng tin kh√≥a h·ªçc
        const courseRows = tables[2].querySelectorAll("tbody tr");
        courseRows.forEach((row) => {
          const cells = row.querySelectorAll("td");
          if (cells.length === 2) {
            const key = cells[0].innerText.trim();
            const value = cells[1].innerText.trim();
            if (value) courseInfo[key] = value;
          }
        });

        // 4. Th√¥ng tin ng∆∞·ªùi li√™n h·ªá (x·ª≠ l√Ω ƒë·∫∑c bi·ªát)
    const relativeRows = tables[3].querySelectorAll("tbody tr");
    relativeRows.forEach((row) => {
      const cells = row.querySelectorAll("td");
      cells.forEach((cell) => {
        const titleElement = cell.querySelector("h6");
        const valueElement = cell.querySelector("p");

        if (titleElement && valueElement) {
          const title = titleElement.innerText.trim();
          const value = valueElement.innerText.trim();
          if (title && value) {
            relativeInfo[title] = value;
          }
        } else if (valueElement) {
          // N·∫øu ch·ªâ c√≥ p (kh√¥ng c√≥ h6), l·∫•y text p l√†m value cho ti√™u ƒë·ªÅ g·∫ßn nh·∫•t
          const previousTitle = cell.previousElementSibling?.querySelector("h6")?.innerText.trim();
          if (previousTitle) {
            const value = valueElement.innerText.trim();
            if (value) {
              relativeInfo[previousTitle] = value;
            }
          }
        }
      });
    });
  }

      return { studentInfo, contactInfo, courseInfo, relativeInfo };
    });

    console.log("‚úÖ ƒê√£ l·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin 4 b·∫£ng.");
    return data;
  } catch (error) {
    console.error("‚ùå L·ªói trong getStudentInfo:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}


// H√†m l·∫•y l·ªãch h·ªçc
async function getSchedule(weekOffset = 0) {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi v√†o trang ch·ªß: ${page.url()}`);

    console.log("üìÖ ƒêi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn l·ªãch h·ªçc...");
    await page.goto("https://portal.vhu.edu.vn/student/schedules", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p l·ªãch h·ªçc: ${page.url()}`);

    console.log("‚è≥ ƒêang ch·ªù b·∫£ng l·ªãch h·ªçc t·∫£i...");
    await page.waitForSelector("#psc-table-head", { timeout: 60000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y #psc-table-head. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });

    if (weekOffset === 1) {
      const weekButtons = await page.$$(".MuiButton-containedPrimary");
      if (weekButtons[2]) {
        await weekButtons[2].click();
        console.log("üîú ƒê√£ ch·ªçn tu·∫ßn sau.");
        await delay(5000);
      } else {
        throw new Error("Kh√¥ng t√¨m th·∫•y n√∫t 'Tu·∫ßn sau' tr√™n trang.");
      }
    }

    const scheduleData = await page.evaluate(() => {
      const table = document.querySelector("#psc-table-head");
      if (!table) throw new Error("Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch h·ªçc!");

      const headers = Array.from(table.querySelectorAll("thead th")).map((th) => {
        const text = th.innerHTML.trim();
        const [thu, ngay] = text.split("<br>");
        return `${thu} - ${ngay}`;
      });
      const days = headers.slice(1);

      const schedule = {};
      days.forEach((day, dayIndex) => {
        schedule[day] = [];
        const cells = table.querySelectorAll(`tbody td:nth-child(${dayIndex + 2})`);
        cells.forEach((cell) => {
          const detail = cell.querySelector(".DetailSchedule");
          if (detail) {
            const spans = detail.querySelectorAll("span");
            const subjectFull = spans[1]?.textContent.trim() || "Kh√¥ng r√µ";
            const subjectMatch = subjectFull.match(/(.*) \((.*)\)/);
            schedule[day].push({
              room: spans[0]?.textContent.trim() || "Kh√¥ng r√µ",
              subject: subjectMatch ? subjectMatch[1] : subjectFull,
              classCode: subjectMatch ? subjectMatch[2] : "Kh√¥ng r√µ",
              periods: spans[4]?.textContent.replace("Ti·∫øt: ", "").trim() || "Kh√¥ng r√µ",
              startTime: spans[5]?.textContent.replace("Gi·ªù b·∫Øt ƒë·∫ßu: ", "").trim() || "Kh√¥ng r√µ",
              professor: spans[6]?.textContent.replace("GV: ", "").trim() || "",
              email: spans[7]?.textContent.replace("Email: ", "").trim() || "",
            });
          }
        });
      });
      return { schedule, week: "n√†y c·ªßa b·∫°n" };
    });

    console.log("‚úÖ ƒê√£ l·∫•y l·ªãch h·ªçc.");
    return scheduleData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getSchedule:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// H√†m l·∫•y th√¥ng b√°o
async function getNotifications() {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi v√†o trang ch·ªß: ${page.url()}`);

    console.log("üîî ƒêi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn th√¥ng b√°o...");
    await page.goto("https://portal.vhu.edu.vn/student/index", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p th√¥ng b√°o: ${page.url()}`);

    console.log("‚è≥ ƒêang ch·ªù b·∫£ng th√¥ng b√°o t·∫£i...");
    await page.waitForSelector(".MuiTableBody-root", { timeout: 60000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y .MuiTableBody-root. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });

    const notifications = await page.evaluate(() => {
      const rows = document.querySelectorAll(".MuiTableBody-root tr");
      if (!rows.length) throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng b√°o!");
      return Array.from(rows).map((row) => {
        const cols = row.querySelectorAll("td");
        return {
          MessageSubject: cols[0]?.querySelector("a")?.textContent.trim() || "Kh√¥ng r√µ",
          SenderName: cols[1]?.textContent.trim() || "Kh√¥ng r√µ",
          CreationDate: cols[2]?.textContent.trim() || "Kh√¥ng r√µ",
        };
      });
    });

    console.log("‚úÖ ƒê√£ l·∫•y th√¥ng b√°o.");
    return notifications;
  } catch (error) {
    console.error("‚ùå L·ªói trong getNotifications:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// H√†m l·∫•y c√¥ng t√°c x√£ h·ªôi
async function getSocialWork() {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });

    console.log("üìã ƒêi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn c√¥ng t√°c x√£ h·ªôi...");
    await page.goto("https://portal.vhu.edu.vn/student/congtacxahoi", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p: ${page.url()}`);

    await page.waitForSelector(".MuiTableBody-root", { timeout: 60000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y b·∫£ng c√¥ng t√°c x√£ h·ªôi. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });

    const socialWork = await page.evaluate(() => {
      const rows = document.querySelectorAll(".MuiTableBody-root tr");
      if (!rows.length) throw new Error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c√¥ng t√°c x√£ h·ªôi!");
      return Array.from(rows).map((row) => {
        const cols = row.querySelectorAll("td");
        return {
          Index: cols[0]?.textContent.trim() || "Kh√¥ng r√µ",
          Event: cols[1]?.textContent.trim() || "Kh√¥ng r√µ",
          Location: cols[2]?.textContent.trim() || "Kh√¥ng r√µ",
          NumRegistered: cols[3]?.textContent.trim() || "Kh√¥ng r√µ",
          Points: cols[4]?.textContent.trim() || "0",
          StartTime: cols[5]?.textContent.trim() || "Kh√¥ng r√µ",
          EndTime: cols[6]?.textContent.trim() || "Kh√¥ng r√µ",
        };
      });
    });

    console.log("‚úÖ ƒê√£ l·∫•y c√¥ng t√°c x√£ h·ªôi.");
    return socialWork;
  } catch (error) {
    console.error("‚ùå L·ªói trong getSocialWork:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// H√†m l·∫•y t·ªïng s·ªë t√≠n ch·ªâ ƒë√£ ƒë·∫°t v√† ƒêi·ªÉm TB chung
async function getCredits() {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });

    console.log("üìä ƒêi·ªÅu h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn trang ƒëi·ªÉm...");
    await page.goto("https://portal.vhu.edu.vn/student/marks", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p ƒëi·ªÉm: ${page.url()}`);

    console.log("‚è≥ ƒêang ch·ªù b·∫£ng ƒëi·ªÉm t·∫£i...");
    await page.waitForSelector(".MuiTableContainer-root", { timeout: 60000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y b·∫£ng ƒëi·ªÉm sau 60 gi√¢y. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });

    const creditsData = await page.evaluate(() => {
      const tables = document.querySelectorAll(".MuiTableContainer-root table");
      let totalCredits = 0;
      let avgScore = null;

      tables.forEach((table) => {
        const cells = table.querySelectorAll("td strong");
        cells.forEach((cell) => {
          const text = cell.innerHTML;
          const match = text.match(/STC ƒê·∫°t H·ªçc K·ª≥: (\d+(\.\d+)?)/);
          if (match) {
            const credits = parseFloat(match[1]);
            totalCredits += credits;
          }
        });
      });

      const allStrongTags = document.querySelectorAll("strong");
      allStrongTags.forEach((tag) => {
        const text = tag.innerHTML;
        const avgMatch = text.match(/ƒêi·ªÉm TB chung: H·ªá 10: (\d+(\.\d+)?)/);
        if (avgMatch) {
          avgScore = parseFloat(avgMatch[1]);
        }
      });

      if (!avgScore) {
        const bodyText = document.body.innerHTML;
        const fallbackMatch = bodyText.match(/ƒêi·ªÉm TB chung: H·ªá 10: (\d+(\.\d+)?)/);
        if (fallbackMatch) {
          avgScore = parseFloat(fallbackMatch[1]);
        } else {
          avgScore = 7.28;
        }
      }

      return { totalCredits, avgScore };
    });

    console.log("‚úÖ ƒê√£ l·∫•y d·ªØ li·ªáu:", creditsData);
    return creditsData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getCredits:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// H√†m l·∫•y l·ªãch thi h·ªçc k·ª≥
async function getExamSchedule() {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });

    console.log("üìù ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang l·ªãch thi...");
    await page.goto("https://portal.vhu.edu.vn/student/exam", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p l·ªãch thi: ${page.url()}`);

    console.log("‚è≥ ƒêang ch·ªù b·∫£ng l·ªãch thi t·∫£i...");
    await page.waitForSelector(".MuiTableContainer-root.psc-table", { timeout: 60000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y .MuiTableContainer-root.psc-table sau 60 gi√¢y. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });

    const examData = await page.evaluate(() => {
      const table = document.querySelector(".MuiTableContainer-root.psc-table");
      if (!table) {
        throw new Error("Kh√¥ng t√¨m th·∫•y b·∫£ng l·ªãch thi .MuiTableContainer-root.psc-table!");
      }

      const rows = table.querySelectorAll("tbody tr.psc_ExamSapToi");
      if (!rows.length) {
        return { exams: [], year: "Kh√¥ng r√µ", semester: "Kh√¥ng r√µ" };
      }

      let exams = Array.from(rows).map((row) => {
        const cols = row.querySelectorAll("td");
        return {
          subject: cols[0]?.textContent.trim() || "Kh√¥ng r√µ",
          attempt: cols[1]?.textContent.trim() || "Kh√¥ng r√µ",
          date: cols[2]?.textContent.trim() || "Kh√¥ng r√µ",
          time: cols[3]?.textContent.trim() || "Ch∆∞a c·∫≠p nh·∫≠t",
          room: cols[4]?.textContent.trim() || "Ch∆∞a c·∫≠p nh·∫≠t",
          location: cols[5]?.textContent.trim() || "Ch∆∞a c·∫≠p nh·∫≠t",
          format: cols[6]?.textContent.trim() || "Kh√¥ng r√µ",
          absent: cols[7]?.textContent.trim() || "Kh√¥ng",
        };
      });

      exams = exams.filter(exam => exam.room !== "Ch∆∞a c·∫≠p nh·∫≠t" && exam.location !== "Ch∆∞a c·∫≠p nh·∫≠t");

      exams.sort((a, b) => {
        const [dayA, monthA, yearA] = a.date.split("/").map(Number);
        const [dayB, monthB, yearB] = b.date.split("/").map(Number);
        const dateA = new Date(yearA, monthA - 1, dayA);
        const dateB = new Date(yearB, monthB - 1, dayB);
        return dateA - dateB;
      });

      const year = document.querySelector("input[name='NamHienTai']")?.value || "Kh√¥ng r√µ";
      const semester = document.querySelector(".MuiSelect-select")?.textContent.trim() || "Kh√¥ng r√µ";

      return { exams, year, semester };
    });

    console.log("‚úÖ ƒê√£ l·∫•y v√† l·ªçc d·ªØ li·ªáu l·ªãch thi:", examData);
    return examData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getExamSchedule:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// H√†m l·∫•y th√¥ng tin t√†i ch√≠nh
async function getAccountFees() {
  const browser = await launchBrowser();
  const page = await browser.newPage();
  try {
    await login(page, process.env.VHU_EMAIL, process.env.VHU_PASSWORD);
    console.log("üè† ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ch·ªß sinh vi√™n...");
    await page.goto("https://portal.vhu.edu.vn/student", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });

    console.log("üí∞ ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang t√†i ch√≠nh...");
    await page.goto("https://portal.vhu.edu.vn/student/accountfees", {
      waitUntil: "networkidle0",
      timeout: 60000,
    });
    console.log(`üåê URL sau khi truy c·∫≠p t√†i ch√≠nh: ${page.url()}`);

    console.log("‚è≥ ƒêang ch·ªù b·∫£ng t√†i ch√≠nh t·∫£i...");
    await page.waitForSelector(".MuiTableContainer-root", { timeout: 60000 }).catch(async () => {
      const content = await page.content();
      throw new Error(`Kh√¥ng t√¨m th·∫•y b·∫£ng t√†i ch√≠nh sau 60 gi√¢y. N·ªôi dung trang: ${content.slice(0, 500)}...`);
    });

    const feesData = await page.evaluate(() => {
      const table = document.querySelector(".MuiTableContainer-root table");
      if (!table) {
        throw new Error("Kh√¥ng t√¨m th·∫•y b·∫£ng t√†i ch√≠nh (.MuiTableContainer-root table)");
      }

      const headerRow = table.querySelector("thead tr");
      if (!headerRow) {
        throw new Error("Kh√¥ng t√¨m th·∫•y h√†ng ƒë·∫ßu ti√™n trong thead");
      }

      const cells = headerRow.querySelectorAll("th");
      let mustPay = 0, paid = 0, debt = 0;
      cells.forEach((cell) => {
        const text = cell.innerText.replace(/[^\d]/g, "");
        const value = parseInt(text, 10) || 0;

        if (cell.querySelector("strong")) {
          if (value === 123528500) mustPay = value;
          else if (value === 109908500) paid = value;
        } else if (cell.getAttribute("colspan") === "6") {
          debt = value;
        }
      });

      return {
        mustPay,
        paid,
        debt,
      };
    });

    console.log("‚úÖ ƒê√£ l·∫•y d·ªØ li·ªáu t√†i ch√≠nh:", feesData);
    return feesData;
  } catch (error) {
    console.error("‚ùå L·ªói trong getAccountFees:", error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// C·∫•u h√¨nh Webhook
const PORT = process.env.PORT || 10000;
const webhookUrl = `https://${process.env.RENDER_EXTERNAL_HOSTNAME}/bot${TOKEN}`;

// Endpoint ƒë·ªÉ nh·∫≠n tin nh·∫Øn t·ª´ Telegram
app.post(`/bot${TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Health check endpoint
app.get("/ping", (req, res) => res.status(200).send("Bot is alive!"));

// Wake-up endpoint
app.get("/wake-up", (req, res) => {
  console.log("‚è∞ Chatbot ƒë∆∞·ª£c ƒë√°nh th·ª©c b·ªüi cron-job.org!");
  res.status(200).send("Chatbot is awake!");
});

// Kh·ªüi ƒë·ªông server v√† thi·∫øt l·∫≠p webhook
app.listen(PORT, async () => {
  console.log(`Server ch·∫°y tr√™n port ${PORT}`);
  try {
    await bot.setWebHook(webhookUrl);
    console.log(`‚úÖ Webhook ƒë∆∞·ª£c thi·∫øt l·∫≠p: ${webhookUrl}`);
  } catch (error) {
    console.error("‚ùå L·ªói thi·∫øt l·∫≠p webhook:", error.message);
  }
});

// X·ª≠ l√Ω l·ªánh Telegram
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "üëã Xin ch√†o Ch√≠ C∆∞·ªùng! M√¨nh l√† Tr·ª£ l√Ω ùó©ùóõùó®.\n" +
      "‚å®Ô∏è C√°c l·ªánh t∆∞∆°ng t√°c v·ªõi tr·ª£ l√Ω ùó©ùóõùó® nh∆∞ sau:\n" +
      "------------------------------------\n" +
      "ü§ñ /ùòÄùòÅùóÆùóøùòÅ - B·∫Øt ƒë·∫ßu giao ti·∫øp v·ªõi Tr·ª£ l√Ω ùó©ùóõùó®.\n" +
      "üë§ /ùòÅùóµùóºùóªùó¥ùòÅùó∂ùóª - L·∫•y th√¥ng tin c√° nh√¢n.\n"+
      "üìÖ /ùòÅùòÇùóÆùóªùóªùóÆùòÜ - L·∫•y l·ªãch h·ªçc tu·∫ßn n√†y.\n" +
      "üóì /ùòÅùòÇùóÆùóªùòÄùóÆùòÇ - L·∫•y l·ªãch h·ªçc tu·∫ßn sau.\n" +
      "üîî /ùòÅùóµùóºùóªùó¥ùóØùóÆùóº - L·∫•y danh s√°ch th√¥ng b√°o.\n" +
      "üìù /ùóπùó∂ùó∞ùóµùòÅùóµùó∂ - L·∫•y l·ªãch thi h·ªçc k·ª≥ n√†y.\n" +
      "üìã /ùó∞ùóºùóªùó¥ùòÅùóÆùó∞ - L·∫•y danh s√°ch c√¥ng t√°c x√£ h·ªôi.\n" +
      "üìä /ùòÅùó∂ùóªùó∞ùóµùó∂ - T·ªïng s·ªë t√≠n ch·ªâ v√† ƒëi·ªÉm TB ƒë√£ ƒë·∫°t.\n" +
      "üíµ /ùòÅùóÆùó∂ùó∞ùóµùó∂ùóªùóµ - L·∫•y th√¥ng tin t√†i ch√≠nh sinh vi√™n.\n" +
      "------------------------------------\n" +
      "üí°M·∫πo: Nh·∫•n n√∫t ‚ò∞ ùó†ùó≤ùóªùòÇ b√™n c·∫°nh ƒë·ªÉ ch·ªçn l·ªánh nhanh h∆°n!"
  );
});

bot.onText(/\/thongtin/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üìã ƒêang l·∫•y th√¥ng tin chi ti·∫øt, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const { studentInfo, contactInfo, courseInfo, relativeInfo } = await getStudentInfo();

    let message = "";

    // 1. Th√¥ng tin sinh vi√™n
    if (Object.keys(studentInfo).length > 0) {
      message += "üë§ *Th√¥ng tin sinh vi√™n:*\n------------------------------------\n";
      for (const [key, value] of Object.entries(studentInfo)) {
        message += `üë§ *${key}*: ${value}\n`;
      }
      message += "\n";
    }

    // 2. Th√¥ng tin li√™n l·∫°c
    if (Object.keys(contactInfo).length > 0) {
      message += "‚òéÔ∏è *Th√¥ng tin li√™n l·∫°c:*\n------------------------------------\n";
      for (const [key, value] of Object.entries(contactInfo)) {
        message += `‚òéÔ∏è *${key}*: ${value}\n`;
      }
      message += "\n";
    }

    // 3. Th√¥ng tin kh√≥a h·ªçc
    if (Object.keys(courseInfo).length > 0) {
      message += "üéì *Th√¥ng tin kh√≥a h·ªçc:*\n------------------------------------\n";
      for (const [key, value] of Object.entries(courseInfo)) {
        message += `üéì *${key}*: ${value}\n`;
      }
      message += "\n";
    }

    // 4. Th√¥ng tin ng∆∞·ªùi li√™n h·ªá
    if (Object.keys(relativeInfo).length > 0) {
      message += "üë®‚Äçüë©‚Äçüë¶ *Th√¥ng tin ng∆∞·ªùi li√™n h·ªá:*\n------------------------------------\n";
      for (const [key, value] of Object.entries(relativeInfo)) {
        message += `üë®‚Äçüë©‚Äçüë¶ *${key}*: ${value}\n`;
      }
    }


    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y th√¥ng tin:* ${error.message}`);
  }
});



bot.onText(/\/tuannay/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üìÖ ƒêang l·∫•y l·ªãch h·ªçc tu·∫ßn n√†y, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const lichHoc = await getSchedule(0);
    let message = `üìÖ *L·ªãch h·ªçc tu·∫ßn n√†y c·ªßa b·∫°n:*\n------------------------------------\n`;
    let hasSchedule = false;

    for (const [ngay, monHocs] of Object.entries(lichHoc.schedule)) {
      message += `üìå *${ngay}:*\n`;
      if (monHocs.length) {
        hasSchedule = true;
        monHocs.forEach((m) => {
          message += `üìñ *M√¥n h·ªçc:* ${m.subject} ‚Äì ${m.classCode}\n` +
                     `üìÖ *Ti·∫øt:* ${m.periods}\n` +
                     `üïõ *Gi·ªù b·∫Øt ƒë·∫ßu:* ${m.startTime}\n` +
                     `üìç *Ph√≤ng h·ªçc:* ${m.room}\n` +
                     `üßë‚Äçüè´ *Gi·∫£ng vi√™n:* ${m.professor}\n` +
                     `üìß *Email:* ${m.email}\n\n`;
        });
      } else {
        message += "‚ùå *Kh√¥ng c√≥ l·ªãch h·ªçc*\n";
      }
      message += "\n";
    }

    if (!hasSchedule) {
      message = `üìÖ *L·ªãch h·ªçc tu·∫ßn n√†y c·ªßa b·∫°n:*\n------------------------------------\n‚ùå *Kh√¥ng c√≥ l·ªãch h·ªçc trong tu·∫ßn n√†y.*`;
    }

    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y l·ªãch h·ªçc:* ${error.message}`);
  }
});

bot.onText(/\/tuansau/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üìÖ ƒêang l·∫•y l·ªãch h·ªçc tu·∫ßn sau, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const lichHoc = await getSchedule(1);
    let message = `üìÖ *L·ªãch h·ªçc tu·∫ßn sau c·ªßa b·∫°n:*\n------------------------------------\n`;
    let hasSchedule = false;

    for (const [ngay, monHocs] of Object.entries(lichHoc.schedule)) {
      message += `üìå **${ngay}:**\n`;
      if (monHocs.length) {
        hasSchedule = true;
        monHocs.forEach((m) => {
          message += `üìñ *M√¥n h·ªçc:* ${m.subject} ‚Äì ${m.classCode}\n` +
                     `üìÖ *Ti·∫øt:* ${m.periods}\n` +
                     `üïõ *Gi·ªù b·∫Øt ƒë·∫ßu:* ${m.startTime}\n` +
                     `üìç *Ph√≤ng h·ªçc:* ${m.room}\n` +
                     `üßë‚Äçüè´ *Gi·∫£ng vi√™n:* ${m.professor}\n` +
                     `üìß *Email:* ${m.email}\n\n`;
        });
      } else {
        message += "‚ùå *Kh√¥ng c√≥ l·ªãch h·ªçc*\n";
      }
      message += "\n";
    }

    if (!hasSchedule) {
      message = `üìÖ *L·ªãch h·ªçc tu·∫ßn sau c·ªßa b·∫°n:*\n------------------------------------\n‚ùå *Kh√¥ng c√≥ l·ªãch h·ªçc trong tu·∫ßn sau.*`;
    }

    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y l·ªãch h·ªçc:* ${error.message}`);
  }
});

bot.onText(/\/thongbao/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üîî ƒêang l·∫•y th√¥ng b√°o, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const notifications = await getNotifications();
    let message = "üîî *Danh s√°ch th√¥ng b√°o m·ªõi nh·∫•t:*\n------------------------------------\n";
    notifications.slice(0, 5).forEach((n, i) => {
      message += `üì¢ *Th√¥ng b√°o ${i + 1}. ${n.MessageSubject}*\nüì© *Ng∆∞·ªùi ƒëƒÉng:* ${n.SenderName}\n‚è∞ *Th·ªùi gian:* ${n.CreationDate}\n\n`;
    });
    if (notifications.length > 5) message += `üì¢ C√≤n ${notifications.length - 5} th√¥ng b√°o kh√°c. H√£y truy c·∫≠p v√†o [Portal VHU](https://portal.vhu.edu.vn/login) ƒë·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt.`;
    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y th√¥ng b√°o:* ${error.message}`);
  }
});

bot.onText(/\/congtac/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üìã ƒêang l·∫•y danh s√°ch c√¥ng t√°c x√£ h·ªôi, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const congTacData = await getSocialWork();
    let message = "üìã *Danh s√°ch c√¥ng t√°c x√£ h·ªôi:*\n------------------------------------\n";
    congTacData.slice(0, 5).forEach((c, i) => {
      message += `üìå *C√¥ng t√°c ${c.Index}.* ${c.Event}\nüìç *ƒê·ªãa ƒëi·ªÉm: * ${c.Location || "Ch∆∞a c·∫≠p nh·∫≠t"}\nüë• *S·ªë l∆∞·ª£ng: * ${c.NumRegistered} ng∆∞·ªùi ƒëƒÉng k√Ω\n‚≠ê *ƒêi·ªÉm r√®n luy·ªán: *${c.Points} ƒëi·ªÉm\nüïõ *Th·ªùi gian: *${c.StartTime} - ${c.EndTime}\n\n`;
    });
    if (congTacData.length > 5) message += `üì¢ C√≤n ${congTacData.length - 5} c√¥ng t√°c kh√°c. H√£y truy c·∫≠p v√†o [Portal VHU](https://portal.vhu.edu.vn/login) ƒë·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt.`;
    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y c√¥ng t√°c x√£ h·ªôi:* ${error.message}`);
  }
});

bot.onText(/\/tinchi/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üìä ƒêang l·∫•y t·ªïng s·ªë t√≠n ch·ªâ v√† ƒëi·ªÉm TB, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const { totalCredits, avgScore } = await getCredits();
    let message = `üìä *T·ªïng s·ªë t√≠n ch·ªâ v√† ƒëi·ªÉm trung b√¨nh c·ªßa b·∫°n:*\n------------------------------------\n`;
    message += `üéì *S·ªë t√≠n ch·ªâ ƒë√£ ƒë·∫°t:* ${totalCredits} t√≠n ch·ªâ\n`;
    message += `üìà *ƒêi·ªÉm TB chung (H·ªá 10):* ${avgScore}\n`;
    message += `‚ÑπÔ∏è H√£y truy c·∫≠p [Portal VHU](https://portal.vhu.edu.vn/) ƒë·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt.`;
    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y d·ªØ li·ªáu:* ${error.message}`);
  }
});

bot.onText(/\/lichthi/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üìù ƒêang l·∫•y l·ªãch thi h·ªçc k·ª≥ n√†y, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const { exams, year, semester } = await getExamSchedule();
    let message = `üìù *L·ªãch thi ${semester} - NƒÉm h·ªçc ${year}:*\n------------------------------------\n`;
    let hasExams = false;

    if (exams.length === 0) {
      message += "‚ùå *Ch∆∞a c√≥ l·ªãch thi n√†o c√≥ ph√≤ng thi v√† ƒë·ªãa ƒëi·ªÉm ƒë∆∞·ª£c c·∫≠p nh·∫≠t.*";
    } else {
      exams.forEach((exam, index) => {
        hasExams = true;
        message += `üìö *${index + 1}. ${exam.subject}*\n` +
                   `üî¢ *L·∫ßn thi:* ${exam.attempt}\n` +
                   `üìÖ *Ng√†y thi:* ${exam.date}\n` +
                   `‚è∞ *Gi·ªù thi:* ${exam.time}\n` +
                   `üìç *Ph√≤ng thi:* ${exam.room} (${exam.location})\n` +
                   `‚úçÔ∏è *H√¨nh th·ª©c:* ${exam.format}\n` +
                   `üö´ *V·∫Øng thi:* ${exam.absent}\n\n`;
      });
    }

    message += `‚ÑπÔ∏è H√£y truy c·∫≠p [Portal VHU](https://portal.vhu.edu.vn/) ƒë·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt.`;
    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y l·ªãch thi:* ${error.message}`);
  }
});

bot.onText(/\/taichinh/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "üí∞ ƒêang l·∫•y th√¥ng tin t√†i ch√≠nh, vui l√≤ng ch·ªù trong gi√¢y l√°t ‚åõ...");
  try {
    const { mustPay, paid, debt } = await getAccountFees();

    const formatNumber = (num) => num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

    let message = `üíµ *Th√¥ng tin t√†i ch√≠nh c·ªßa b·∫°n:*\n------------------------------------\n`;
    message += `üí∏ *H·ªçc ph√≠ ph·∫£i ƒë√≥ng:* ${formatNumber(mustPay)} VNƒê\n`;
    message += `üí≤ *H·ªçc ph√≠ ƒë√£ ƒë√≥ng:* ${formatNumber(paid)} VNƒê\n`;
    message += `üëõ *H·ªçc ph√≠ c√≤n n·ª£:* ${formatNumber(debt)} VNƒê\n`;
    message += `‚ÑπÔ∏è H√£y truy c·∫≠p [Portal VHU](https://portal.vhu.edu.vn/) ƒë·ªÉ bi·∫øt th√™m th√¥ng tin chi ti·∫øt.`;

    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå *L·ªói l·∫•y d·ªØ li·ªáu t√†i ch√≠nh:* ${error.message}`);
  }
});

console.log("ü§ñ Bot Telegram (Webhook) ƒëang kh·ªüi ƒë·ªông...");
